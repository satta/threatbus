name: "Python Egg"
on:
  push:
    branches:
      - master
  pull_request:
  release:
    types: published
env:
  DEBIAN_FRONTEND: noninteractive
jobs:
  egg-install:
    name: Egg Installation
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: true
      matrix:
        python-version: [3.7, 3.8]
        os: [ubuntu-20.04, macOS-latest]
    steps:
    - uses: actions/checkout@v2
      with:
        ref: ${{ github.ref }}
    - name: Setup Python ${{ matrix.python-version }}
      uses: actions/setup-python@v2
      with:
        python-version: ${{ matrix.python-version }}
    - name: Set up Dist Environment
      run: |
        python -m pip install --upgrade pip
        python -m pip install wheel setuptools
    - name: Install Application and Plugins
      run: |
        make clean build
    - name: Package Application and Plugins
      run: |
        make clean dist

  test:
    name: Unit Tests
    runs-on: ubuntu-latest
    container: debian:bullseye
    steps:
    - uses: actions/checkout@v2
      with:
        ref: ${{ github.ref }}
    - name: Set up Dist Environment
      run: |
        apt-get -qq update
        apt-get -qqy install python3-pip software-properties-common gnupg2 libbroker2 python3-broker
        update-alternatives --install /usr/bin/python python /usr/bin/python3 1
        python -m pip install --upgrade pip
        python -m pip install wheel setuptools
    - name: Install Application and Plugins
      run: |
        make dev-mode
    - name: Run Unit Tests
      run: |
        make unit-tests

  docker-release:
    name: Publish to DockerHub
    if: ${{ github.event_name == 'release' || github.event_name == 'push' }}
    runs-on: ubuntu-20.04
    needs: egg-install
    steps:
    - uses: actions/checkout@v2
      with:
        ref: ${{ github.ref }}
    - name: Publish Threat Bus Docker Image
      uses: elgohr/Publish-Docker-Github-Action@v5
      with:
        name: tenzir/threatbus
        username: ${{ secrets.DOCKERHUB_USER }}
        password: ${{ secrets.DOCKERHUB_PASSWORD }}
        tags: latest,${{ github.sha }}
    - name: Publish vast-threatbus Docker Image
      uses: elgohr/Publish-Docker-Github-Action@v5
      with:
        name: tenzir/vast-threatbus
        username: ${{ secrets.DOCKERHUB_USER }}
        password: ${{ secrets.DOCKERHUB_PASSWORD }}
        dockerfile: docker/vast-threatbus/Dockerfile
        tags: latest,${{ github.sha }}
    - name: Publish stix-shifter-threatbus Docker Image
      uses: elgohr/Publish-Docker-Github-Action@v5
      with:
        name: tenzir/stix-shifter-threatbus
        username: ${{ secrets.DOCKERHUB_USER }}
        password: ${{ secrets.DOCKERHUB_PASSWORD }}
        dockerfile: docker/stix-shifter-threatbus/Dockerfile
        tags: latest,${{ github.sha }}
    - name: Publish suricata-threatbus Docker Image
      uses: elgohr/Publish-Docker-Github-Action@v5
      with:
        name: tenzir/suricata-threatbus
        username: ${{ secrets.DOCKERHUB_USER }}
        password: ${{ secrets.DOCKERHUB_PASSWORD }}
        dockerfile: docker/suricata-threatbus/Dockerfile
        tags: latest,${{ github.sha }}

  egg-release:
    name: Egg Release
    if: github.event_name == 'release'
    needs: egg-install
    runs-on: ubuntu-20.04
    env:
      TWINE_USERNAME: __token__
      TWINE_PASSWORD: ${{ secrets.PYPI_TOKEN }}
    steps:
    - uses: actions/checkout@v2
      with:
        ref: ${{ github.ref }}
    - name: Set up Python 3.8
      uses: actions/setup-python@v1
      with:
        python-version: 3.8
    - name: Set up Dist Environment
      run: |
        python -m pip install --upgrade pip
        python -m pip install wheel setuptools twine
    - name: Package Application and Plugins
      run: |
        make clean dist
    - name: Create Release
      id: create_release
      run: |
        NAME="Threat Bus $(date +%Y-%m-%d)"
        ARCHIVE="$NAME.tar"
        tar cf "$ARCHIVE" apps/zeek
        find -type d -name dist -exec tar uvf "$ARCHIVE" {} \;
        gzip "$ARCHIVE"
        ASSET="$ARCHIVE.gz"
        echo "::set-output name=name::$NAME"
        echo "::set-output name=asset::$ASSET"
    # This step ensures that assets from previous runs are cleaned up to avoid
    # failure of the next step (asset upload)
    - name: Delete existing Release Assets
      uses: mknejp/delete-release-assets@v1
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        tag: ${{ github.ref }}
        fail-if-no-assets: false # don't fail if no previous assets exist
        fail-if-no-release: true # only delete assets when `tag` refers to a release
        assets: ${{ steps.create_release.outputs.asset }}
    - name: Publish to GitHub
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ github.event.release.upload_url }}
        asset_path: ${{ steps.create_release.outputs.asset }}
        asset_name: ${{ steps.create_release.outputs.name }}
        asset_content_type: application/gzip
    - name: Publish to PyPI
      run: |
        find -type d -name dist -exec python -m twine upload --verbose --non-interactive {}/* \;
